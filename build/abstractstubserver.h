/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_
#define JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_

#include <jsonrpccpp/server.h>

class AbstractStubServer : public jsonrpc::AbstractServer<AbstractStubServer>
{
    public:
        AbstractStubServer(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<AbstractStubServer>(conn, type)
        {
            this->bindAndAddMethod(jsonrpc::Procedure("run", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_ARRAY, "key",jsonrpc::JSON_INTEGER,"pid",jsonrpc::JSON_INTEGER,"sid",jsonrpc::JSON_INTEGER,"submission",jsonrpc::JSON_ARRAY, NULL), &AbstractStubServer::runI);
            this->bindAndAddMethod(jsonrpc::Procedure("judgeStatus", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,  NULL), &AbstractStubServer::judgeStatusI);
            this->bindAndAddMethod(jsonrpc::Procedure("preserve", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "sid",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::preserveI);
            this->bindAndAddMethod(jsonrpc::Procedure("cancel", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_BOOLEAN, "key",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::cancelI);
            this->bindAndAddMethod(jsonrpc::Procedure("sync", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "pid",jsonrpc::JSON_INTEGER, NULL), &AbstractStubServer::syncI);
        }

        inline virtual void runI(const Json::Value &request, Json::Value &response)
        {
            response = this->run(request["key"].asInt(), request["pid"].asInt(), request["sid"].asInt(), request["submission"]);
        }
        inline virtual void judgeStatusI(const Json::Value &request, Json::Value &response)
        {
            (void)request;
            response = this->judgeStatus();
        }
        inline virtual void preserveI(const Json::Value &request, Json::Value &response)
        {
            response = this->preserve(request["sid"].asInt());
        }
        inline virtual void cancelI(const Json::Value &request, Json::Value &response)
        {
            response = this->cancel(request["key"].asInt());
        }
        inline virtual void syncI(const Json::Value &request, Json::Value &response)
        {
            response = this->sync(request["pid"].asInt());
        }
        virtual Json::Value run(int key, int pid, int sid, const Json::Value& submission) = 0;
        virtual Json::Value judgeStatus() = 0;
        virtual int preserve(int sid) = 0;
        virtual bool cancel(int key) = 0;
        virtual std::string sync(int pid) = 0;
};

#endif //JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_
